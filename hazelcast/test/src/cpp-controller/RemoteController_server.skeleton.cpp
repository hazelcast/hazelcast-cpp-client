// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RemoteController.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class RemoteControllerHandler : virtual public RemoteControllerIf {
 public:
  RemoteControllerHandler() {
    // Your initialization goes here
  }

  bool ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  bool clean() {
    // Your implementation goes here
    printf("clean\n");
  }

  bool exit() {
    // Your implementation goes here
    printf("exit\n");
  }

  void createCluster(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig) {
    // Your implementation goes here
    printf("createCluster\n");
  }

  void startMember(Member& _return, const std::string& clusterId) {
    // Your implementation goes here
    printf("startMember\n");
  }

  bool shutdownMember(const std::string& clusterId, const std::string& memberId) {
    // Your implementation goes here
    printf("shutdownMember\n");
  }

  bool terminateMember(const std::string& clusterId, const std::string& memberId) {
    // Your implementation goes here
    printf("terminateMember\n");
  }

  bool suspendMember(const std::string& clusterId, const std::string& memberId) {
    // Your implementation goes here
    printf("suspendMember\n");
  }

  bool resumeMember(const std::string& clusterId, const std::string& memberId) {
    // Your implementation goes here
    printf("resumeMember\n");
  }

  bool shutdownCluster(const std::string& clusterId) {
    // Your implementation goes here
    printf("shutdownCluster\n");
  }

  bool terminateCluster(const std::string& clusterId) {
    // Your implementation goes here
    printf("terminateCluster\n");
  }

  void splitMemberFromCluster(Cluster& _return, const std::string& memberId) {
    // Your implementation goes here
    printf("splitMemberFromCluster\n");
  }

  void mergeMemberToCluster(Cluster& _return, const std::string& clusterId, const std::string& memberId) {
    // Your implementation goes here
    printf("mergeMemberToCluster\n");
  }

  void executeOnController(Response& _return, const std::string& clusterId, const std::string& script, const Lang::type lang) {
    // Your implementation goes here
    printf("executeOnController\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<RemoteControllerHandler> handler(new RemoteControllerHandler());
  ::std::shared_ptr<TProcessor> processor(new RemoteControllerProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

